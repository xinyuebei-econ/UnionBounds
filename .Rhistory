deltahat <- A %*% betahat
deltaSigma <- A %*% betaSigma %*% t(A)
gamma <- sum(abs(ell_post))
Al <- rbind(cbind(gamma * M * rbind(diag(T_pre), -diag(T_pre)), rep(1, 2 * T_pre))) %*% rbind(cbind(L_pre, matrix(0, T_pre, 1)), matrix(c(rep(0, T_pre), 1), 1, T_pre + 1))
Au <- Al
CI_result <- CI_ModifiedConditional(deltahat, deltaSigma, Al, Au, alpha, alphac, eta, B, Blarge, tol, tol_r)
return(list(CI = CI_result$CI, delta1 = CI_result$delta1, c = CI_result$c))
}
library(readxl)
# Read the vector betahat from the first sheet
file_path <- "C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/simulation/hybrid_twomethods/hybridaux2/Rpackage/R/Example.xlsx"
betahat <- read_excel(file_path, sheet = 1, range = "A1:A5", col_names = FALSE)
betahat <- as.matrix(betahat)
# Read the matrix betaSigma from the second sheet
betaSigma <- read_excel(file_path, sheet = 2, range = "A1:E5", col_names = FALSE)
betaSigma <- as.matrix(betaSigma)
#
prePeriodIndices <- c(1,2,3)
ell_post <- c(1,0)
CI_RelativeMagnitudes(betahat, betaSigma, prePeriodIndices, ell_post)
CI_R <- CI_RelativeMagnitudes(betahat, betaSigma, prePeriodIndices, ell_post)
CI_R
CI_R1 <- CI_RelativeMagnitudes(betahat, betaSigma, prePeriodIndices, ell_post)
CI_R1
CI_R1 <- CI_RelativeMagnitudes(betahat, betaSigma, prePeriodIndices, ell_post, M = 2)
CI_R1
source("C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/simulation/hybrid_twomethods/hybridaux2/Rpackage/R/maincheck.R")
CIproj_p <- function(c, delta, alphac, deltastar_demean, Al, Au, sigma_l, sigma_u, corr_m, corr_l, corr_u, eta, tol_r) {
# Calculate lambda_l and lambda_u
lambda_l <- Al %*% delta
lambda_u <- Au %*% delta
lb <- min(lambda_l)
ub <- max(lambda_u)
mb <- (lb + ub) / 2
deltastar <- matrix(rep(t(delta), each = nrow(deltastar_demean)), nrow = nrow(deltastar_demean), byrow = F)
deltastar = deltastar + deltastar_demean
lambdastar_l <- deltastar %*% t(Al)
lambdastar_u <- deltastar %*% t(Au)
# Calculate Tstar_l, Tstar_m, and Tstar_u
Tstar_l <- apply(cbind(apply(sweep(lambdastar_l - lb, 2, sigma_l, FUN = "/"),1,min), apply(sweep(lb - lambdastar_u, 2, sigma_u, FUN = "/"),1,min)),1,max)
Tstar_m <- apply(cbind(apply(sweep(lambdastar_l - mb, 2, sigma_l, FUN = "/"),1,min), apply(sweep(mb - lambdastar_u, 2, sigma_u, FUN = "/"),1,min)),1,max)
Tstar_u <- apply(cbind(apply(sweep(lambdastar_l - ub, 2, sigma_l, FUN = "/"),1,min), apply(sweep(ub - lambdastar_u, 2, sigma_u, FUN = "/"),1,min)),1,max)
ind_proj_l <- (Tstar_l <= c)
ind_proj_m <- (Tstar_m <= c)
ind_proj_u <- (Tstar_u <= c)
# Function to calculate condition proj
condition_proj <- function(select, lambdastar_l, lambdastar_u, b, sigma_l, sigma_u) {
if (sum(select) == 0) {
ind_c <- rep(0, nrow(deltastar))
} else {
sub_deltastar <- deltastar[select == 1, , drop = FALSE]
sub_lambdastar_l <- lambdastar_l[select == 1, , drop = FALSE]
sub_lambdastar_u <- lambdastar_u[select == 1, , drop = FALSE]
Tc1 <- apply(sweep(sub_lambdastar_l - b, 2, sigma_l, FUN = "/"), 1, min)
Tc2 <- apply(sweep(b - sub_lambdastar_u, 2, sigma_u, FUN = "/"), 1, min)
Tc <- apply(cbind(Tc1, Tc2),1,max)
bounds <- CIcon_TNbounds(b, sub_deltastar, Al, Au, sigma_l, sigma_u, corr_m, corr_l, corr_u, tol_r)
phi <- (pnorm(Tc) - pnorm(bounds$th_1)) / (pnorm(bounds$th_2) - pnorm(bounds$th_1))
sub_ind_c <- (phi <= 1 - alphac)
ind_c <- rep(0, nrow(deltastar))
ind_c[select == 1] <- sub_ind_c
}
return(ind_c)
}
ind_c_l <- condition_proj(1 - ind_proj_l, lambdastar_l, lambdastar_u, lb, sigma_l, sigma_u)
ind_c_m <- condition_proj(1 - ind_proj_m, lambdastar_l, lambdastar_u, mb, sigma_l, sigma_u)
ind_c_u <- condition_proj(1 - ind_proj_u, lambdastar_l, lambdastar_u, ub, sigma_l, sigma_u)
ind_l <- pmax(ind_c_l, ind_proj_l)
ind_m <- pmax(ind_c_m, ind_proj_m)
ind_u <- pmax(ind_c_u, ind_proj_u)
p1 <- mean(1 - ind_l * pmax(ind_m, ind_u))
p2 <- mean(1 - ind_u * pmax(ind_m, ind_l))
p <- max(p1, p2) + eta
return(p)
}
CIcon_TNbounds <- function(theta, deltahat, Al, Au, sigma_l, sigma_u, corr_m, corr_l, corr_u, tol_r) {
B <- nrow(deltahat)
lambdahat_l <- deltahat %*% t(Al)
lambdahat_u <- deltahat %*% t(Au)
Tlb <- sweep(lambdahat_l - theta, 2, sigma_l, FUN = "/")
Tub <- sweep(theta - lambdahat_u, 2, sigma_u, FUN = "/")
Tl <- apply(Tlb, 1, min)
Tu <- apply(Tub, 1, min)
bl <- apply(Tlb, 1, which.min)
bu <- apply(Tub, 1, which.min)
corr_m_blb <- corr_m[bl, ]
corr_m_bub <- t(corr_m[, bu])
taux_l1 <- matrix(10^10, B, nrow(Au))
taux_l1a <- (1 + corr_m_blb)^(-1) * (Tub + corr_m_blb * Tl)
taux_l1[1 + corr_m_blb > tol_r] <- taux_l1a[1 + corr_m_blb > tol_r]
th_1_1 <- apply(taux_l1, 1, min) * (Tl >= Tu)
th_1_1[th_1_1 == 10^10] <- -10^10
th_1_1 <- th_1_1 * (Tl >= Tu)
taux_l2 <- matrix(10^10, B, nrow(Al))
taux_l2a <- (1 - corr_l[bl, ])^(-1) * (Tlb - corr_l[bl, ] * Tl)
taux_l2[1 > corr_l[bl, ] + tol_r] <- taux_l2a[1 > corr_l[bl, ] + tol_r]
th_2_1 <- apply(taux_l2, 1, min) * (Tl >= Tu)
taux_u1 <- matrix(10^10, B, nrow(Al))
taux_u1a <- (1 + corr_m_bub)^(-1) * (Tlb + corr_m_bub * Tu)
taux_u1[1 + corr_m_bub > tol_r] <- taux_u1a[1 + corr_m_bub > tol_r]
th_1_2 <- apply(taux_u1, 1, min) * (Tl < Tu)
th_1_2[th_1_2 == 10^10] <- -10^10
th_1_2 <- th_1_2 * (Tl < Tu)
taux_u2 <- matrix(10^10, B, nrow(Au))
taux_u2a <- (1 - corr_u[bu, ])^(-1) * (Tub - corr_u[bu, ] * Tu)
taux_u2[1 > corr_u[bu, ] + tol_r] <- taux_u2a[1 > corr_u[bu, ] + tol_r]
th_2_2 <- apply(taux_u2, 1, min) * (Tl < Tu)
th_1 <- th_1_1 + th_1_2
th_2 <- th_2_1 + th_2_2
return(list(th_1 = th_1, th_2 = th_2))
}
CIcon <- function(deltahat, deltaSigma, Al, Au, alphac, CI_p, tol, tol_r) {
kk <- nrow(Al)
lambdaSigma <- rbind(Al, Au) %*% deltaSigma %*% t(rbind(Al, Au))
lambda_sigma <- sqrt(diag(lambdaSigma))
corr_all <- diag(1 / lambda_sigma) %*% lambdaSigma %*% diag(1 / lambda_sigma)
corr_m <- corr_all[1:kk, (kk + 1):(2 * kk)]
corr_l <- corr_all[1:kk, 1:kk]
corr_u <- corr_all[(kk + 1):(2 * kk), (kk + 1):(2 * kk)]
sigma_l <- lambda_sigma[1:kk]
sigma_u <- lambda_sigma[(kk + 1):(2 * kk)]
lb <- Al %*% deltahat - sigma_l * qnorm(1 - 10^-4)
ub <- Au %*% deltahat + sigma_u * qnorm(1 - 10^-4)
lb <- min(lb)
ub <- max(ub)
# CI lower bound
rej <- 1
theta <- lb
while (rej == 1 && theta <= CI_p[1]) {
Tcl <- min((Al %*% deltahat - theta) / sigma_l)
Tcu <- min((theta - Au %*% deltahat) / sigma_u)
Tc <- max(Tcl, Tcu)
bounds <- CIcon_TNbounds(theta, t(deltahat), Al, Au, sigma_l, sigma_u, corr_m, corr_l, corr_u, tol_r)
t_val <- (1 - alphac) * pnorm(bounds$th_2) + alphac * pnorm(bounds$th_1)
rej <- (pnorm(Tc) > t_val)
theta <- theta + tol
}
CI_lower <- min(theta, CI_p[1])
# CI upper bound
rej <- 1
theta <- ub
while (rej == 1 && theta >= CI_p[2]) {
Tcl <- min((Al %*% deltahat - theta) / sigma_l)
Tcu <- min((theta - Au %*% deltahat) / sigma_u)
Tc <- max(Tcl, Tcu)
bounds <- CIcon_TNbounds(theta, t(deltahat), Al, Au, sigma_l, sigma_u, corr_m, corr_l, corr_u, tol_r)
t_val <- (1 - alphac) * pnorm(bounds$th_2) + alphac * pnorm(bounds$th_1)
rej <- (pnorm(Tc) > t_val)
theta <- theta - tol
}
CI_upper <- max(theta, CI_p[2])
CIcon <- c(CI_lower, CI_upper)
return(CIcon)
}
CI_ModifiedConditional <- function(deltahat, deltaSigma, Al, Au, alpha = 0.05, alphac = 0.045, eta = 10^-3, B = 2500, Blarge = 25000, tol = 10^-3, tol_r = 10^-5) {
library(MASS)
library(parallel)
library('nloptr')
index <- c()
# Loop over columns of Al
for (i in 1:ncol(Al)) {
# Check if all elements in the column are the same in both Al and Au
if (length(unique(Al[, i])) == 1 && length(unique(Au[, i])) == 1) {
index <- c(index, i)
}
}
# Calculate \hat{c}_{\eta}
set.seed(0)
deltastar_demean_large <- mvrnorm(Blarge, mu = rep(0, length(deltahat)), Sigma = deltaSigma)
deviation <- apply( sweep(abs(deltastar_demean_large), 2, sqrt(diag(deltaSigma)), FUN = "/"), 1, max)
c_bd <- quantile(deviation, 1 - eta,type = 1)
sigma_delta <- sqrt(diag(deltaSigma))
lambdaSigma <- rbind(Al, Au) %*% deltaSigma %*% t(rbind(Al, Au))
sigma_lambda <- sqrt(diag(lambdaSigma))
kk <- nrow(Al)
sigma_l <- sigma_lambda[1:kk]
sigma_u <- sigma_lambda[(kk + 1):(2 * kk)]
corr_all <- solve(diag(sigma_lambda)) %*% lambdaSigma %*% solve(diag(sigma_lambda))
corr_m <- corr_all[1:kk, (kk + 1):(2 * kk)]
corr_l <- corr_all[1:kk, 1:kk]
corr_u <- corr_all[(kk + 1):(2 * kk), (kk + 1):(2 * kk)]
# Construct \hat\Delta
lb <- deltahat - sigma_delta * c_bd
ub <- deltahat + sigma_delta * c_bd
delta1 <- deltahat
lb[index] <- 0
ub[index] <- 0
delta1[index] <- 0
cl <- 0
cu <- qnorm(1 - alpha / 2)
c <- (cl + cu) / 2
delta_fea <- list()
c_fea <- numeric()
obj_large <- function(delta, c_check) {
(alpha - CIproj_p(c_check, delta, alphac, deltastar_demean_large, Al, Au, sigma_l, sigma_u, corr_m, corr_l, corr_u, eta, tol_r)) * 100
}
k <- 1
while (cu - cl > tol) {
set.seed(k)
k <- k + 1
# Redraw deltastar_demean to reduce the sampling bias
deltastar_demean <- mvrnorm(B, mu = rep(0, length(deltahat)), Sigma = deltaSigma)
obj <- function(delta) {
(alpha - CIproj_p(c, delta, alphac, deltastar_demean, Al, Au, sigma_l, sigma_u, corr_m, corr_l, corr_u, eta, tol_r)) * 100
}
p1 <- obj_large(delta1, c)
if (p1 >= 0) {
opts <- list( "algorithm" = "NLOPT_GN_ORIG_DIRECT","xtol_rel" = 1.0e-4)
result <- nloptr( x0 = delta1, eval_f = obj, opts = opts, lb = lb, ub = ub)
delta1 <- result$solution
if (result$objective >0) {
opts <- list( "algorithm" = "NLOPT_GN_CRS2_LM","xtol_rel" = 1.0e-4)
result2 <- nloptr( x0 = delta1, eval_f = obj, opts = opts, lb = lb, ub = ub)
if (result2$objective < result$objective){
delta1 <- result2$solution
}
}
# Use a relatively large bootstrap sample B*10 to reduce the sampling bias along direction delta1
p1 <- obj_large(delta1, c)
if (p1 >= 0) {
cu <- c
} else {
cl <- c
delta_fea <- append(delta_fea, list(delta1))
c_fea <- c(c, c_fea)
}
} else {
cl <- c
delta_fea <- append(delta_fea, list(delta1))
c_fea <- c(c, c_fea)
}
c <- (cl + cu) / 2
}
# Double check using the final direction delta1
cl <- c
cu <- qnorm(1 - alpha / 2)
while (cu - cl > tol) {
c <- (cl + cu) / 2
p <- obj_large(delta1, c)
if (p >= 0) {
cu <- c
} else {
cl <- c
}
}
lambdahat_l <- Al %*% deltahat
lambdahat_u <- Au %*% deltahat
CI_p <- c(min(lambdahat_l - c * sigma_l), max(lambdahat_u + c * sigma_u))
# Calculate the conditional confidence interval
CI_h <- CIcon(deltahat, deltaSigma, Al, Au, alphac, CI_p, tol, tol_r)
return(list(CI_h = CI_h, delta1 = delta1, c = c))
}
CI_RelativeMagnitudes <- function(betahat, betaSigma, prePeriodIndices, ell_post, M = 1, alpha = 0.05, alphac = 0.8 * alpha, eta = 0.001, B = 4000, Blarge = 40000, tol = 1e-3, tol_r = 1e-3) {
# Calculate the relative magnitudes CI in Rambachan and Roth (2023, REStud) Section 2.4.1
# betahat     T*1       regression coefficients, e.g. in RR23 (2),
# deltaSigma  T*T       covariance matrix of betahat
# ell         T_post*1  ell'*tau_post is the parameter of interest
T_pre <- length(prePeriodIndices)
T_post <- length(betahat) - T_pre
ell <- c(rep(0, T_pre), ell_post)
aux1 <- -diag(T_pre)
aux2 <- diag(T_pre + 1)[-1, -ncol(diag(T_pre + 1))]
L_pre <- aux1 + aux2
A <- rbind(cbind(diag(T_pre), matrix(0, T_pre, T_post)), ell)
deltahat <- A %*% betahat
deltaSigma <- A %*% betaSigma %*% t(A)
gamma <- sum(abs(ell_post))
Al <- rbind(cbind(gamma * M * rbind(diag(T_pre), -diag(T_pre)), rep(1, 2 * T_pre))) %*% rbind(cbind(L_pre, matrix(0, T_pre, 1)), matrix(c(rep(0, T_pre), 1), 1, T_pre + 1))
Au <- Al
CI_result <- CI_ModifiedConditional(deltahat, deltaSigma, Al, Au, alpha, alphac, eta, B, Blarge, tol, tol_r)
return(list(CI = CI_result$CI, delta1 = CI_result$delta1, c = CI_result$c))
}
library(readxl)
# Read the vector betahat from the first sheet
file_path <- "C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/simulation/hybrid_twomethods/hybridaux2/Rpackage/R/Example.xlsx"
betahat <- read_excel(file_path, sheet = 1, range = "A1:A5", col_names = FALSE)
betahat <- as.matrix(betahat)
# Read the matrix betaSigma from the second sheet
betaSigma <- read_excel(file_path, sheet = 2, range = "A1:E5", col_names = FALSE)
betaSigma <- as.matrix(betaSigma)
#
prePeriodIndices <- c(1,2,3)
ell_post <- c(1,0)
CI_R0 <- CI_RelativeMagnitudes(betahat, betaSigma, prePeriodIndices, ell_post, M = 1/2)
CI_R1 <- CI_RelativeMagnitudes(betahat, betaSigma, prePeriodIndices, ell_post, M = 1)
CI_R2 <- CI_RelativeMagnitudes(betahat, betaSigma, prePeriodIndices, ell_post, M = 2)
CI_R1
CI_R0
CI_R1
CI_R2
CI_SDRM <- function(betahat, betaSigma, ell_post, prePeriodIndices, M = 1, alpha = 0.05, alphac = 0.8 * alpha, eta = 0.001, B = 2500, Blarge = 25000, tol = 1e-3, tol_r = 1e-3) {
# Calculate the relative magnitudes CI in Rambachan and Roth (2023, REStud) Section 2.4.1
# betahat     T*1       regression coefficients, e.g. in RR23 (2),
# deltaSigma  T*T       covariance matrix of betahat
# ell         T_post*1  ell'*tau_post is the parameter of interest
T_pre <- length(prePeriodIndices)
T_post <- length(betahat) - T_pre
ell <- c(rep(0, T_pre), ell_post)
aux1 <- diag(T_pre)
aux1 <- aux1[-nrow(aux1), ]
aux2 <- -2 * diag(T_pre)
aux2 <- aux2[-1, ]
aux3 <- diag(T_pre + 1)
aux3 <- aux3[, -ncol(aux3)]
aux3 <- aux3[-c(1, 2), ]
Lpre <- aux1 + aux2 + aux3
Lpost <- rep(0, T_pre + T_post)
H <- 1:T_post
L <- numeric(T_post)
for (i in 1:T_post) {
L[i] <- i * (i + 1) / 2
}
Lpost[T_pre] <- sum(ell_post * H)
Lpost <- Lpost + ell
A <- rbind(cbind(Lpre, matrix(0, T_pre - 1, T_post)), Lpost)
deltahat <- A %*% betahat
deltaSigma <- A %*% betaSigma %*% t(A)
Al <- cbind(ell_post %*% L * M * rbind(diag(T_pre - 1), -diag(T_pre - 1)), rep(1, 2 * (T_pre - 1)))
Au <- Al
CI_result <- CIhybrid(deltahat, deltaSigma, Al, Au, alpha, alphac, eta, B, Blarge, tol, tol_r)
return(list(CI = CI_result$CI, delta1 = CI_result$delta1, c = CI_result$c, CI_p = CI_result$CI_p))
}
CI_R0 <- CI_SDRM(betahat, betaSigma, ell_post, prePeriodIndices, M = 1)
T_pre <- length(prePeriodIndices)
T_post <- length(betahat) - T_pre
ell <- c(rep(0, T_pre), ell_post)
aux1 <- diag(T_pre)
aux1 <- aux1[-nrow(aux1), ]
aux2 <- -2 * diag(T_pre)
aux2 <- aux2[-1, ]
aux3 <- diag(T_pre + 1)
aux3 <- aux3[, -ncol(aux3)]
aux3 <- aux3[-c(1, 2), ]
Lpre <- aux1 + aux2 + aux3
Lpost <- rep(0, T_pre + T_post)
H <- 1:T_post
L <- numeric(T_post)
for (i in 1:T_post) {
L[i] <- i * (i + 1) / 2
}
Lpost[T_pre] <- sum(ell_post * H)
Lpost <- Lpost + ell
A <- rbind(cbind(Lpre, matrix(0, T_pre - 1, T_post)), Lpost)
deltahat <- A %*% betahat
deltaSigma <- A %*% betaSigma %*% t(A)
Al <- cbind(ell_post %*% L * M * rbind(diag(T_pre - 1), -diag(T_pre - 1)), rep(1, 2 * (T_pre - 1)))
M = 1
Al <- cbind(ell_post %*% L * M * rbind(diag(T_pre - 1), -diag(T_pre - 1)), rep(1, 2 * (T_pre - 1)))
L
for (i in 1:T_post) {
L[i,1] <- i * (i + 1) / 2
}
ell
A
Lpost
M
L
ell_post %*% t(L)
ell_post
ell_post %*% L
ell_post %*% L * M
rbind(diag(T_pre - 1), -diag(T_pre - 1))
rep(1, 2 * (T_pre - 1))
cbind(ell_post %*% L * M * rbind(diag(T_pre - 1), -diag(T_pre - 1)), t(rep(1, 2 * (T_pre - 1)))
)
ell_post %*% L * M * rbind(diag(T_pre - 1), -diag(T_pre - 1))
rbind(diag(T_pre - 1), -diag(T_pre - 1))
ell_post %*% L * M
c(ell_post %*% L * M)
c(ell_post %*% L * M) * rbind(diag(T_pre - 1), -diag(T_pre - 1))
cbind(c(ell_post %*% L * M) * rbind(diag(T_pre - 1), -diag(T_pre - 1)), t(rep(1, 2 * (T_pre - 1))))
rbind(diag(T_pre - 1), -diag(T_pre - 1))
t(rep(1, 2 * (T_pre - 1)))
rep(1, 2 * (T_pre - 1))
matrix(rep(1, 2 * (T_pre - 1)))
cbind(c(ell_post %*% L * M) * rbind(diag(T_pre - 1), -diag(T_pre - 1)), matrix(rep(1, 2 * (T_pre - 1)))
)
Al <- cbind(c(ell_post %*% L * M) * rbind(diag(T_pre - 1), -diag(T_pre - 1)), matrix(rep(1, 2 * (T_pre - 1))))
Al
Au <- Al
CI_result <- CIhybrid(deltahat, deltaSigma, Al, Au, alpha, alphac, eta, B, Blarge, tol, tol_r)
CI_result <- CI_ModifiedConditional(deltahat, deltaSigma, Al, Au, alpha, alphac, eta, B, Blarge, tol, tol_r)
CI_SDRM <- function(betahat, betaSigma, ell_post, prePeriodIndices, M = 1, alpha = 0.05, alphac = 0.8 * alpha, eta = 0.001, B = 2500, Blarge = 25000, tol = 1e-3, tol_r = 1e-3) {
# Calculate the relative magnitudes CI in Rambachan and Roth (2023, REStud) Section 2.4.1
# betahat     T*1       regression coefficients, e.g. in RR23 (2),
# deltaSigma  T*T       covariance matrix of betahat
# ell         T_post*1  ell'*tau_post is the parameter of interest
T_pre <- length(prePeriodIndices)
T_post <- length(betahat) - T_pre
ell <- c(rep(0, T_pre), ell_post)
aux1 <- diag(T_pre)
aux1 <- aux1[-nrow(aux1), ]
aux2 <- -2 * diag(T_pre)
aux2 <- aux2[-1, ]
aux3 <- diag(T_pre + 1)
aux3 <- aux3[, -ncol(aux3)]
aux3 <- aux3[-c(1, 2), ]
Lpre <- aux1 + aux2 + aux3
Lpost <- rep(0, T_pre + T_post)
H <- 1:T_post
L <- numeric(T_post)
for (i in 1:T_post) {
L[i] <- i * (i + 1) / 2
}
Lpost[T_pre] <- sum(ell_post * H)
Lpost <- Lpost + ell
A <- rbind(cbind(Lpre, matrix(0, T_pre - 1, T_post)), Lpost)
deltahat <- A %*% betahat
deltaSigma <- A %*% betaSigma %*% t(A)
Al <- cbind(c(ell_post %*% L * M) * rbind(diag(T_pre - 1), -diag(T_pre - 1)), matrix(rep(1, 2 * (T_pre - 1))))
Au <- Al
CI_result <- CI_ModifiedConditional(deltahat, deltaSigma, Al, Au, alpha, alphac, eta, B, Blarge, tol, tol_r)
return(list(CI = CI_result$CI, delta1 = CI_result$delta1, c = CI_result$c, CI_p = CI_result$CI_p))
}
CI_R0 <- CI_SDRM(betahat, betaSigma, ell_post, prePeriodIndices, M = 1)
CI_R0
CI_R0 <- CI_SDRM(betahat, betaSigma, ell_post, prePeriodIndices, M = 0.2)
CI_R2 <- CI_SDRM(betahat, betaSigma, ell_post, prePeriodIndices, M = 0.2)
CI_R2
CI_R4 <- CI_SDRM(betahat, betaSigma, ell_post, prePeriodIndices, M = 0.4)
CI_R4
CI_R6 <- CI_SDRM(betahat, betaSigma, ell_post, prePeriodIndices, M = 0.6)
CI_R6
CI_R8 <- CI_SDRM(betahat, betaSigma, ell_post, prePeriodIndices, M = 0.8)
CI_R8
CI_R10 <- CI_SDRM(betahat, betaSigma, ell_post, prePeriodIndices, M = 1)
CI_R10
CI_R12 <- CI_SDRM(betahat, betaSigma, ell_post, prePeriodIndices, M = 1.2)
CI_R12
CI_R14 <- CI_SDRM(betahat, betaSigma, ell_post, prePeriodIndices, M = 1.4)
CI_R14
7200/5
library(usethis)
usethis::create_package("C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/simulation/hybrid_twomethods/hybridaux2/Rpackage/R/UnionBounds")
usethis::create_package("C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/UnionBounds")
library(roxygen2)
devtools::document()
setwd("C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/UnionBounds")
devtools::document()
devtools::document()
devtools::build()
devtools::check()
library(MASS)
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::build()
devtools::check()
usethis::use_mit_license(name = "Xinyue Bei")
usethis::use_mit_license(name = "Xinyue Bei")
usethis::use_mit_license
qnorm
usethis::use_mit_license()
devtools::document()
devtools::build()
library(readxl)
# Read the vector betahat from the first sheet
file_path <- "C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/simulation/hybrid_twomethods/hybridaux2/Rpackage/R/Example.xlsx"
betahat <- read_excel(file_path, sheet = 1, range = "A1:A5", col_names = FALSE)
betahat <- as.matrix(betahat)
# Read the matrix betaSigma from the second sheet
betaSigma <- read_excel(file_path, sheet = 2, range = "A1:E5", col_names = FALSE)
betaSigma <- as.matrix(betaSigma)
prePeriodIndices <- c(1,2,3)
ell_post <- c(1,0)
betahat <- read_excel("C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/simulation/hybrid_twomethods/hybridaux2/Rpackage/R/Example.xlsx", sheet = 1, range = "A1:A5", col_names = FALSE)
betahat <- as.matrix(betahat)
# Read the matrix betaSigma from the second sheet
betaSigma <- read_excel(file_path, sheet = 2, range = "A1:E5", col_names = FALSE)
# Read the vector betahat from the first sheet
betahat <- read_excel("C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/simulation/hybrid_twomethods/hybridaux2/Rpackage/R/Example.xlsx", sheet = 1, range = "A1:A5", col_names = FALSE)
betahat <- as.matrix(betahat)
# Read the matrix betaSigma from the second sheet
betaSigma <- read_excel("C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/simulation/hybrid_twomethods/hybridaux2/Rpackage/R/Example.xlsx", sheet = 2, range = "A1:E5", col_names = FALSE)
betaSigma <- as.matrix(betaSigma)
prePeriodIndices <- c(1,2,3)
Data_Dustmann <- data.frame(betahat = betahat, betaSigma = betaSigma, prePeriodIndices = prePeriodIndices)
mkdir -p C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/UnionBounds/data
mkdir -p "C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/UnionBounds/data"
# Save the objects in an .rda file
save(betahat, betaSigma, prePeriodIndices, file = "C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/UnionBounds/data/example_data.rda")
# Save the objects in an .rda file
save(betahat, betaSigma, prePeriodIndices, file = "C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/UnionBounds/data/example_data.rda")
devtools::document()
devtools::build()
devtools::check()
load("C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/UnionBounds/data/example_data.rda")
data$betahat = betahat
example_data <- list(betahat = betahat, betaSigma = betaSigma, prePeriodIndices = prePeriodIndices)
example_data$betahat
# Save the objects in an .rda file
save(example_data, file = "C:/Users/xinyu/Dropbox (CEMFI)/duke course/research/unionbound/UnionBounds/data/example_data.rda")
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::install()
library(UnionBounds)
result <- CI_SDRM(betahat, betaSigma, c(1,0), prePeriodIndices, M = 1, alpha = 0.05)
result <- CI_SDRM(betahat, betaSigma, prePeriodIndices, c(1,0), M = 1, alpha = 0.05)
result$ConfidenceInterval
remove.packages("UnionBounds")
remotes::install_github("xinyuebei-econ/UnionBounds")
